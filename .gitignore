# -------------------------
# Python
# -------------------------

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# PyInstaller
*.manifest
*.spec
# Keep root-level app.spec tracked for reproducible builds
!/app.spec

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# -------------------------
# Node / Electron
# -------------------------

# Dependencies
node_modules/
jspm_packages/

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Compiled output
dist/
build/
out/
release/

# Electron specific
*.asar
*.asar.unpacked
*.dmg
*.exe
*.msi
*.app

# OS generated files
.DS_Store
Thumbs.db

# Environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# VSCode / IDE
.vscode/
.idea/
.claude/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# -------------------------
# Optional
# -------------------------

# If you use poetry
poetry.lock

# If you use pipenv
Pipfile.lock

# If you use pyenv / virtualenv wrapper
.venv/

# If you bundle frontend build in backend repo
frontend/dist/
frontend/node_modules/

# Project
cache/

# Test artifacts (generated in tests/data/generated/)
tests/data/generated/

# Project documentation
CLAUDE.md
