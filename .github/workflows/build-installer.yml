name: Build Installer

on:
  push:
    branches: [main, release/*]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  NODE_VERSION: '20'
  NSIS_VERSION: '3.11'

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion

    # === AGGRESSIVE CACHING STRATEGY ===

    # Cache 1: NSIS installer and plugins (rarely changes)
    - name: Cache NSIS
      id: cache-nsis
      uses: actions/cache@v4
      with:
        path: |
          build/installer/nsis
          build/installer/Plugins
        key: nsis-${{ env.NSIS_VERSION }}-plugins-v2
        restore-keys: |
          nsis-${{ env.NSIS_VERSION }}-plugins-

    # Cache 2: Generated assets (icons and bitmaps)
    - name: Cache generated assets
      id: cache-assets
      uses: actions/cache@v4
      with:
        path: |
          frontend/icon.ico
        key: assets-${{ hashFiles('.build/scripts/create-icon.ps1', '.build/scripts/create-bitmaps.ps1') }}
        restore-keys: |
          assets-

    # Cache 3: GitVersion tool
    - name: Cache GitVersion
      id: cache-gitversion
      uses: actions/cache@v4
      with:
        path: ~/.dotnet/tools
        key: gitversion-5.x-${{ runner.os }}

    # === VERSION DETERMINATION ===

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
        # Setup action is fast if already cached - ensures PATH is set correctly

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0

    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"

    # === SETUP TOOLS (with caching) ===

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    # === UPDATE VERSION ===

    - name: Update package.json version
      working-directory: frontend
      shell: pwsh
      run: |
        $json = Get-Content package.json -Raw | ConvertFrom-Json
        $json.version = "${{ steps.gitversion.outputs.semVer }}"
        $json | ConvertTo-Json -Depth 10 | Set-Content package.json
        Write-Host "Updated package.json to version: ${{ steps.gitversion.outputs.semVer }}"

    # === BUILD INSTALLER ===

    - name: Prepare build environment
      shell: pwsh
      run: |
        # Ensure build directory exists
        if (-not (Test-Path "build/installer")) {
          New-Item -ItemType Directory -Path "build/installer" -Force
        }

        # Check if NSIS is cached
        if (Test-Path "build/installer/nsis/makensis.exe") {
          Write-Host "[CACHED] NSIS found in cache"
        } else {
          Write-Host "NSIS will be downloaded by build script"
        }

        # Check if icon is cached
        if (Test-Path "frontend/icon.ico") {
          Write-Host "[CACHED] Icon found in cache"
        } else {
          Write-Host "Icon will be generated by build script"
        }

    - name: Build NSIS installer
      shell: pwsh
      run: |
        cd .build/installer

        # Run build script
        .\build-web-installer.ps1

        # Verify output
        cd ..\..\build\installer
        $installer = Get-ChildItem -Filter "RDO-Map-Overlay-WebSetup-*.exe" | Select-Object -First 1
        if ($installer) {
          $sizeMB = [math]::Round($installer.Length / 1MB, 2)
          Write-Host "[SUCCESS] Installer created: $($installer.Name) ($sizeMB MB)"

          # Set output for artifact upload
          echo "INSTALLER_PATH=build/installer/$($installer.Name)" >> $env:GITHUB_ENV
          echo "INSTALLER_NAME=$($installer.Name)" >> $env:GITHUB_ENV
        } else {
          Write-Error "[ERROR] Installer not found!"
          exit 1
        }

    # === UPLOAD ARTIFACTS ===

    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: installer-${{ steps.gitversion.outputs.semVer }}
        path: ${{ env.INSTALLER_PATH }}
        retention-days: 30
        if-no-files-found: error

    # === CREATE RELEASES ===

    - name: Create Release (on main branch push)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        name: Release v${{ steps.gitversion.outputs.semVer }}
        files: ${{ env.INSTALLER_PATH }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.INSTALLER_PATH }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # === PERFORMANCE METRICS ===

    - name: Report build metrics
      if: always()
      shell: pwsh
      run: |
        Write-Host "## Build Performance Metrics"
        Write-Host ""
        Write-Host "### Cache Status:"
        Write-Host "- NSIS & Plugins: ${{ steps.cache-nsis.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
        Write-Host "- Generated Assets: ${{ steps.cache-assets.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
        Write-Host "- GitVersion Tool: ${{ steps.cache-gitversion.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
        Write-Host ""
        Write-Host "### Expected Times:"
        Write-Host "- Cold build: ~3-5 minutes (NSIS download)"
        Write-Host "- Warm build: ~1-2 minutes (all cached)"
        Write-Host ""
        Write-Host "### Build Dependencies:"
        Write-Host "- Windows runner: Required (NSIS Windows-only)"
        Write-Host "- Node.js ${{ env.NODE_VERSION }}: For build scripts"
        Write-Host "- NSIS ${{ env.NSIS_VERSION }}: Auto-downloaded & cached"
        Write-Host "- GitVersion: Auto-installed & cached"
        Write-Host ""
        Write-Host "### Optimizations:"
        Write-Host "- No Python required (removed)"
        Write-Host "- No frontend npm install (not bundled)"
        Write-Host "- Aggressive caching (NSIS, assets, GitVersion)"
        Write-Host "- Minimal dependencies"